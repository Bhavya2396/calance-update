<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="400" viewBox="0 0 800 400" fill="none" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <path d="M 40 0 L 0 0 0 40" fill="none" stroke="#002050" stroke-width="0.5"/>
    </pattern>
    <linearGradient id="d365Gradient" x1="0" y1="0" x2="1" y2="1">
      <stop offset="0%" stop-color="#002050"/>
      <stop offset="100%" stop-color="#0078D4"/>
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="800" height="400" fill="#0A1628"/>
  <rect width="800" height="400" fill="url(#grid)" opacity="0.1"/>
  
  <!-- Central Hub -->
  <g transform="translate(400,200)">
    <!-- Background Circles -->
    <circle r="150" fill="#002050" opacity="0.1">
      <animate attributeName="r" values="145;150;145" dur="3s" repeatCount="indefinite"/>
    </circle>
    <circle r="120" fill="#002050" opacity="0.15">
      <animate attributeName="r" values="115;120;115" dur="3s" repeatCount="indefinite"/>
    </circle>
    
    <!-- Process Ring -->
    <circle r="100" stroke="url(#d365Gradient)" stroke-width="4" fill="none">
      <animate attributeName="stroke-dasharray" values="0,628.32;628.32,0" dur="3s" repeatCount="indefinite"/>
    </circle>
    
    <!-- Center Icon -->
    <g>
      <circle r="40" fill="url(#d365Gradient)"/>
      <path d="M-20 -20h15v15h-15zM5 -20h15v15h-15zM-20 5h15v15h-15zM5 5h15v15h-15z" fill="white" opacity="0.9"/>
    </g>
  </g>
  
  <!-- Process Nodes -->
  <g transform="translate(400,200)">
    {['Sales', 'Marketing', 'Service', 'Finance', 'Operations'].map((label, i) => `
      <g transform="rotate(${i * 72})">
        <g transform="translate(0,-100)">
          <circle r="25" fill="url(#d365Gradient)"/>
          <text x="0" y="5" text-anchor="middle" fill="white" font-family="Arial" font-size="12">${label}</text>
        </g>
      </g>
    `).join('')}
  </g>
  
  <!-- Connecting Lines -->
  <g transform="translate(400,200)" stroke="url(#d365Gradient)" stroke-width="2">
    {[0, 72, 144, 216, 288].map(angle => `
      <path d="M0,0 L${Math.cos(angle * Math.PI / 180) * 100},${-Math.sin(angle * Math.PI / 180) * 100}">
        <animate attributeName="stroke-dasharray" values="5,5;10,10;5,5" dur="3s" repeatCount="indefinite"/>
      </path>
    `).join('')}
  </g>
  
  <!-- Moving Dots -->
  <g transform="translate(400,200)">
    {[0, 72, 144, 216, 288].map((angle, i) => `
      <circle r="3" fill="#00A4EF">
        <animateMotion
          path="M0,0 L${Math.cos(angle * Math.PI / 180) * 100},${-Math.sin(angle * Math.PI / 180) * 100}"
          dur="2s"
          begin="${i * 0.4}s"
          repeatCount="indefinite"
        />
        <animate
          attributeName="opacity"
          values="0;1;0"
          dur="2s"
          begin="${i * 0.4}s"
          repeatCount="indefinite"
        />
      </circle>
    `).join('')}
  </g>
  
  <!-- Metrics -->
  <g font-family="Arial" font-size="14" fill="white" opacity="0.9">
    <text x="150" y="50" text-anchor="start">Process Efficiency</text>
    <text x="150" y="75" text-anchor="start" font-size="24" font-weight="bold">+80%</text>
    
    <text x="650" y="50" text-anchor="end">Customer Satisfaction</text>
    <text x="650" y="75" text-anchor="end" font-size="24" font-weight="bold">+45%</text>
  </g>
</svg> 